les images EpreuveImageEntity / ParkourImageEntity : 
  -> ne pas les create en même temps que les entity avec EpreuveCreateEntity / ParkourCreateEntity
  -> on les uploads avec le service image
    -> on met le lien + l'id_epreuve / id_parkour dans la bdd image_epreuve/ image_parkour
  => on pourra les reprendre normalement avec apollo


relier les epreuves aux parkours :
  -> dans la partie admin des parkours, y'a une recherche sur les epreuves
    -> on voie juste le nom
    -> on envoie juste les id pour la création / modification des epreuves



pour ModifyParkour => 
  pour les epreuves => [1,2,5]
  rien modifier => null
  enlever tout => []



on ne peux pas supprimer une epreuve si elle est relier à un parkour
on peux supprimer un parkour si y'a une relation avec epreuve, ça supprime aussi les relations



+---------------+             +--------------+
|    Resolver   |             |   Service    |
+---------------+             +--------------+
| +handleQuery()|<>----------->| +méthode1() |
| +handleMutat()|             | +méthode2() |
+---------------+             +--------------+
         ^                            |
         |                            |
         |                            | 0..* 
         |                            |
+---------------+             +--------------+
|     Entité    |             |   Entité     |
+---------------+             +--------------+
| -attribut1    |             | -attribut1   |
| -attribut2    |             | -attribut2   |
+---------------+             +--------------+


https://api-adresse.data.gouv.fr/search/?q=caen&postcode=14000&type=municipality

une map avec tout les parkours



resolver => ce qui va etre utilisé en front
service => utiliser à partir du back


-----

**Première solution :** Nous pourrions envoyer le token dans le retour de la requête en plus de notre Message et le stocker ensuite dans le front avec un **localStorage** pourquoi pas? Puis utiliser Apollo Client pour envoyer à chaque requête le token que nous avions préalablement stocké dans le localStorage.
C’est bien une des possibilités, mais pas celle que je vais vous proposer. 

Pourquoi?
Parce que le **localStorage** a beau être simple à utiliser et ne pas nécessiter de configuration particulière, il est vulnérable aux attaques **XSS** (Cross Site Scripting) (Si un attaquant parvient à injecter un script malveillant sur la page, il pourrait accéder au localStorage).
De plus les données stockées dans le **localStorage** ne sont pas automatiquement expirées.
Elles ne sont pas non plus envoyées automatiquement dans chaque requête (ce qui peut être un bien si cela est souhaité, un mal quand ça ne l’est pas puisqu’il faudra le faire manuellement dans notre code (vous pourrez trouver un exemple avec Apollo Client ici : https://www.apollographql.com/docs/react/networking/authentication/#header)
Je ne dis pas que cette solution n’est pas possible, je dis que je lui préfère les cookies.

**Deuxième solution :** Les cookies donc! L’avantage des cookies est qu’ils vous nous permettre de les sécuriser notamment à l’aide d’options telles que **HttpOnly** et **Secure (qui permettrait de le restreindre aux connexions HTTPS, ce qui renforce la sécurité, à garder en tête quand vous aurez un nom de domaine sur votre site/projet)**
Les **HttpOnly et Secure** sont donc des attributs ajoutés à un cookie pour indiquer que ce cookie ne peut pas être accessible via **HTTP** et qu'il est inaccessible aux scripts côté client (JavaScript).

Cela signifie que les scripts malveillants ne peuvent pas accéder aux informations sensibles stockées dans le cookie, ce qui renforce en quelque sorte la sécurité de l'application web.
**Les cookies sont envoyées automatiquement dans chaque requête** (à contrario du **localStorage**, cela peut être un bien si cela est souhaité, un mal quand ça ne l’est pas puisqu’ils seront systématiquement envoyés même si vous n’en avez pas le besoin).
Dans notre cas de figure ça s’y prête bien puisque c’est justement ce que l’on cherche à faire : envoyer le token à chaque requête.

-----

    CLIENT    |    ADMIN     | NON CONNECTE
--------------|--------------|-------------
page profil   | page profil  |  
favoris       | options      |
note          |              |
options       |              |